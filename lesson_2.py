"""1. Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе."""

my_list = [1, True, "Hello", "lol", 3, [10, 20, 30, 40]]
for all_list in my_list:
    print(type(all_list))


"""2. Для списка реализовать обмен значений соседних элементов, 
т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
При нечетном количестве элементов последний сохранить на своем месте. 
Для заполнения списка элементов необходимо использовать функцию input()."""

my_list = input("Введите элементы списка: ").split()

for i in range(0, len(my_list)-1, 2):
    my_list[i], my_list[i+1] = my_list[i+1], my_list[i]

print(my_list)


"""3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и через dict."""

season_list = ("зима", "весна", "лето", "осень")
season_dict = {'key_1': 'зима', 'key_2': 'весна', 'key_3': 'лето', 'key_4': 'осень'}
month = int(input("Введите числа от 1 до 12: "))
if month == 12 or month == 1 or month == 2:
    print(season_list[0])
    print(season_dict.get('key_1'))
elif 3 <= month <= 5:
    print(season_list[1])
    print(season_dict.get('key_2'))
elif 6 <= month <= 8:
    print(season_list[2])
    print(season_dict.get('key_3'))
elif 9 <= month <= 11:
    print(season_list[3])
    print(season_dict.get('key_4'))
else:
    print("Нет такого месяца")

"""4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
Если в слово длинное, выводить только первые 10 букв в слове."""

my_str = input("Введите строку: ")
a = my_str.split(' ')
for i, el in enumerate(a, 1):
    if len(el) > 10:
        el = el[0:10]
    print(f"{i}. {el}")


"""5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
У пользователя необходимо запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2]."""

number = int(input("Enter number: "))
my_list = [7, 5, 3, 3, 2]
c = my_list.count(number)
for el in my_list:
    if c > 0:
        i = my_list.index(number)
        my_list.insert(i+c, number)
        break
    else:
        if number > el:
            j = my_list.index(el)
            my_list.insert(j, number)
            break
        elif number < my_list[len(my_list) - 1]:
            my_list.append(number)
print(my_list)

